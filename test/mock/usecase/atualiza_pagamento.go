// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecase/atualiza_pagamento.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/usecase/atualiza_pagamento.go -package=mock_usecase -destination=test/mock/usecase/atualiza_pagamento.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAtualizaPagamento is a mock of AtualizaPagamento interface.
type MockAtualizaPagamento struct {
	ctrl     *gomock.Controller
	recorder *MockAtualizaPagamentoMockRecorder
}

// MockAtualizaPagamentoMockRecorder is the mock recorder for MockAtualizaPagamento.
type MockAtualizaPagamentoMockRecorder struct {
	mock *MockAtualizaPagamento
}

// NewMockAtualizaPagamento creates a new mock instance.
func NewMockAtualizaPagamento(ctrl *gomock.Controller) *MockAtualizaPagamento {
	mock := &MockAtualizaPagamento{ctrl: ctrl}
	mock.recorder = &MockAtualizaPagamentoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtualizaPagamento) EXPECT() *MockAtualizaPagamentoMockRecorder {
	return m.recorder
}

// Atualiza mocks base method.
func (m *MockAtualizaPagamento) Atualiza(ctx context.Context, status, pedidoID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atualiza", ctx, status, pedidoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Atualiza indicates an expected call of Atualiza.
func (mr *MockAtualizaPagamentoMockRecorder) Atualiza(ctx, status, pedidoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atualiza", reflect.TypeOf((*MockAtualizaPagamento)(nil).Atualiza), ctx, status, pedidoID)
}
