// Code generated by MockGen. DO NOT EDIT.
// Source: client/pedido.go
//
// Generated by this command:
//
//	mockgen -source=client/pedido.go -package=mock_client -destination=test/mock/client/pedido.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPedido is a mock of Pedido interface.
type MockPedido struct {
	ctrl     *gomock.Controller
	recorder *MockPedidoMockRecorder
}

// MockPedidoMockRecorder is the mock recorder for MockPedido.
type MockPedidoMockRecorder struct {
	mock *MockPedido
}

// NewMockPedido creates a new mock instance.
func NewMockPedido(ctrl *gomock.Controller) *MockPedido {
	mock := &MockPedido{ctrl: ctrl}
	mock.recorder = &MockPedidoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPedido) EXPECT() *MockPedidoMockRecorder {
	return m.recorder
}

// AtualizaStatus mocks base method.
func (m *MockPedido) AtualizaStatus(ctx context.Context, status, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtualizaStatus", ctx, status, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtualizaStatus indicates an expected call of AtualizaStatus.
func (mr *MockPedidoMockRecorder) AtualizaStatus(ctx, status, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtualizaStatus", reflect.TypeOf((*MockPedido)(nil).AtualizaStatus), ctx, status, id)
}
