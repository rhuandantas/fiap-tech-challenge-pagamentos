// Code generated by MockGen. DO NOT EDIT.
// Source: client/producao.go
//
// Generated by this command:
//
//	mockgen -source=client/producao.go -package=mock_client -destination=test/mock/client/producao.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProducao is a mock of Producao interface.
type MockProducao struct {
	ctrl     *gomock.Controller
	recorder *MockProducaoMockRecorder
}

// MockProducaoMockRecorder is the mock recorder for MockProducao.
type MockProducaoMockRecorder struct {
	mock *MockProducao
}

// NewMockProducao creates a new mock instance.
func NewMockProducao(ctrl *gomock.Controller) *MockProducao {
	mock := &MockProducao{ctrl: ctrl}
	mock.recorder = &MockProducaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducao) EXPECT() *MockProducaoMockRecorder {
	return m.recorder
}

// AdicionaFila mocks base method.
func (m *MockProducao) AdicionaFila(ctx context.Context, obj map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdicionaFila", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdicionaFila indicates an expected call of AdicionaFila.
func (mr *MockProducaoMockRecorder) AdicionaFila(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdicionaFila", reflect.TypeOf((*MockProducao)(nil).AdicionaFila), ctx, obj)
}
