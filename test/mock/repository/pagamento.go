// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/repository/pagamento.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/repository/pagamento.go -package=mock_repo -destination=test/mock/repository/pagamento.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	domain "fiap-tech-challenge-pagamentos/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPagamentoRepo is a mock of PagamentoRepo interface.
type MockPagamentoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPagamentoRepoMockRecorder
}

// MockPagamentoRepoMockRecorder is the mock recorder for MockPagamentoRepo.
type MockPagamentoRepoMockRecorder struct {
	mock *MockPagamentoRepo
}

// NewMockPagamentoRepo creates a new mock instance.
func NewMockPagamentoRepo(ctrl *gomock.Controller) *MockPagamentoRepo {
	mock := &MockPagamentoRepo{ctrl: ctrl}
	mock.recorder = &MockPagamentoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagamentoRepo) EXPECT() *MockPagamentoRepoMockRecorder {
	return m.recorder
}

// AtualizaStatus mocks base method.
func (m *MockPagamentoRepo) AtualizaStatus(ctx context.Context, status, pedidoId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtualizaStatus", ctx, status, pedidoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtualizaStatus indicates an expected call of AtualizaStatus.
func (mr *MockPagamentoRepoMockRecorder) AtualizaStatus(ctx, status, pedidoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtualizaStatus", reflect.TypeOf((*MockPagamentoRepo)(nil).AtualizaStatus), ctx, status, pedidoId)
}

// Insere mocks base method.
func (m *MockPagamentoRepo) Insere(ctx context.Context, pagamento *domain.Pagamento) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insere", ctx, pagamento)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insere indicates an expected call of Insere.
func (mr *MockPagamentoRepoMockRecorder) Insere(ctx, pagamento any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insere", reflect.TypeOf((*MockPagamentoRepo)(nil).Insere), ctx, pagamento)
}

// PesquisaPorPedidoID mocks base method.
func (m *MockPagamentoRepo) PesquisaPorPedidoID(ctx context.Context, pedidoId string) (*domain.Pagamento, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorPedidoID", ctx, pedidoId)
	ret0, _ := ret[0].(*domain.Pagamento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorPedidoID indicates an expected call of PesquisaPorPedidoID.
func (mr *MockPagamentoRepoMockRecorder) PesquisaPorPedidoID(ctx, pedidoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorPedidoID", reflect.TypeOf((*MockPagamentoRepo)(nil).PesquisaPorPedidoID), ctx, pedidoId)
}
